local a=Shared.UseResource()if not a then return end;assert(load(LoadResourceFile("PolyZone","client.lua")))()assert(load(LoadResourceFile("PolyZone","BoxZone.lua")))()assert(load(LoadResourceFile("PolyZone","EntityZone.lua")))()assert(load(LoadResourceFile("PolyZone","CircleZone.lua")))()AddStore("ZONES",function(b)b:destroy()end)local c=function(d)local e={points={},options={}}local f,g=nil,nil;if d.points then for h=1,#d.points do e.points[#e.points+1]=vector2(d.points[h].x,d.points[h].y)f=f and(d.points[h].z<f and d.points[h].z or f)or d.points[h].z;g=g and(d.points[h].z>g and d.points[h].z or g)or d.points[h].z end;local i=(f+g)/2;e.options.minZ=i-(d.thickness or 4)/2 or f;e.options.maxZ=i+(d.thickness or 4)/2 or g end;e.options.debugGrid=d.debug;return e.points,e.options end;local j=function(k,l,d)l.onEnter=d.onEnter;l.onExit=d.onExit;l.inside=d.inside;l.entered=false;AddToStore("ZONES",k,l)l:onPlayerInOut(function(m,n)if l.onEnter and m then l:onEnter(n)end;if l.onExit and not m then l:onExit(n)end;l.entered=m;if l.inside then CreateThread(function()while l.entered do l:inside(n)Wait(0)end end)end end)return l end;Client.Zones=Client.Zones or{}Client.Zones.Poly=function(k,d)local l=PolyZone:Create(c(d))return j(k,l,d)end;Client.Zones.Circle=function(k,d)local l=CircleZone:Create(d.coords,d.radius,{debugPoly=d.debug,useZ=true})return j(k,l,d)end;Client.Zones.Box=function(k,d)local l=BoxZone:Create(d.coords,d.size.x,d.size.y,{debugPoly=d.debug,heading=d.rotation,minZ=d.coords.z-d.size.z/2,maxZ=d.coords.z+d.size.z/2})return j(k,l,d)end