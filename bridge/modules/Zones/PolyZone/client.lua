if not IsMissing("Zones","PolyZone")then return end;assert(load(LoadResourceFile("PolyZone","client.lua")))()assert(load(LoadResourceFile("PolyZone","BoxZone.lua")))()assert(load(LoadResourceFile("PolyZone","EntityZone.lua")))()assert(load(LoadResourceFile("PolyZone","CircleZone.lua")))()AddStore("ZONES",function(a)a:destroy()end)local b=function(c)local d={points={},options={}}local e,f=nil,nil;if c.points then for g=1,#c.points do d.points[#d.points+1]=vector2(c.points[g].x,c.points[g].y)e=e and(c.points[g].z<e and c.points[g].z or e)or c.points[g].z;f=f and(c.points[g].z>f and c.points[g].z or f)or c.points[g].z end;local h=(e+f)/2;d.options.minZ=h-(c.thickness or 4)/2 or e;d.options.maxZ=h+(c.thickness or 4)/2 or f end;d.options.debugGrid=c.debug;return d.points,d.options end;local i=function(j,k,c)k.onEnter=c.onEnter;k.onExit=c.onExit;k.inside=c.inside;k.entered=false;AddToStore("ZONES",j,k)k:onPlayerInOut(function(l,m)if k.onEnter and l then k:onEnter(m)end;if k.onExit and not l then k:onExit(m)end;k.entered=l;if k.inside then CreateThread(function()while k.entered do k:inside(m)Wait(0)end end)end end)return k end;Lib.Zones={Poly=function(j,c)local k=PolyZone:Create(b(c))return i(j,k,c)end,Circle=function(j,c)local k=CircleZone:Create(c.coords,c.radius,{debugPoly=c.debug,useZ=true})return i(j,k,c)end,Box=function(j,c)local k=BoxZone:Create(c.coords,c.size.x,c.size.y,{debugPoly=c.debug,heading=c.rotation,minZ=c.coords.z-c.size.z/2,maxZ=c.coords.z+c.size.z/2})return i(j,k,c)end}