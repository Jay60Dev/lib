Lib.Inventory=Lib.Inventory or{}Lib.Inventory.CanCarry=function(a,b,c,d)c=type(c)=="string"and{c}or c;local e=Lib.Inventory.GetWeight(a,c)*d;local f=Lib.Inventory.GetMaxWeight(a)return e<=f end;Lib.Inventory.MergeDuplicateItems=function(a,c)local g={}for h=1,#c do local i=false;for j=1,#g do if c[h].name==g[j].name and Lib.Table.Matches(a,c[h].metadata,g[j].metadata)then g[j].count=g[j].count+c[h].count;i=true end end;if not i then g[#g+1]=c[h]end end;return g end;Lib.Inventory.Transaction=function(a,b,k,l)local m=Lib.Inventory.MergeDuplicateItems(a,k)local n=Lib.Inventory.MergeDuplicateItems(a,l)if type(n)~="table"then return print("Give items must be a table")end;if type(m)~="table"then return print("Take items must be a table")end;local o={give=Lib.Inventory.GetItemTableWeight(a,n),take=Lib.Inventory.GetItemTableWeight(a,m),max=Lib.Inventory.GetMaxWeight(a),current=Lib.Inventory.GetPlayerInventoryWeight(a,b)}local p=o.give-o.take;local q=o.current+p;if q>o.max then return false,"Cannot carry new weight"end;for h=1,#m do if not Lib.Inventory.HasItem(a,b,m[h].name,m[h].count,m[h].metadata)then local r=""if m[h].metadata then r=" with metadata: "..json.encode(m[h].metadata)end;return false,("Cannot take item: %s, count: %s%s"):format(m[h].name,m[h].count,r)end end;local s={}for h=1,#m do if not Lib.Inventory.RemoveItem(a,b,m[h].name,m[h].count,m[h].metadata)then for j=1,h-1 do s[#s+1]=m[j]end;return false,("Failed to remove item: %s, count: %s"):format(m[h].name,m[h].count),s end end;for h=1,#n do if not Lib.Inventory.AddItem(a,b,n[h].name,n[h].count,n[h].metadata)then for j=h+1,#n do Lib.Inventory.RemoveItem(a,b,n[j].name,n[j].count,n[j].metadata)end;return false,("Failed to add item: %s, count: %s"):format(n[h].name,n[h].count),s end end;return true end