Shared.Table=Shared.Table or{}Shared.Table.Matches=function(a,b,c)if type(b)~="table"or type(c)~="table"then return b==c end;for d,e in pairs(b)do if c[d]==nil then return false end;if type(e)=="table"then if not Shared.Table.Matches(a,e,c[d])then return false end else if e~=c[d]then return false end end end;for d,e in pairs(c)do if b[d]==nil then return false end;if type(e)=="table"then if not Shared.Table.Matches(a,e,b[d])then return false end else if e~=b[d]then return false end end end;return true end;Shared.Table.Type=function(a,f)if not next(f)then return"empty"end;local g=true;local h=false;for d in pairs(f)do if type(d)~="number"then g=false;break else h=true end end;return g and"array"or(h and"mixed"or"object")end;Shared.Table.RealArrayLengthIncludingNilValues=function(a,f)local i=0;local j=0;for d,e in pairs(f)do i=math.max(i,d)if e~=nil then j=j+1 end end;return i,j end;Shared.Table.RemoveNilValues=function(a,f)local k=Shared.Table.Type(a,f)if k=="empty"then return{}end;local l={}if k=="array"then local m=Shared.Table.RealArrayLengthIncludingNilValues(a,f)for n=1,m do if f[n]~=nil then l[#l+1]=f[n]end end;return l end;for d,e in pairs(f)do if e~=nil then l[d]=e end end;return l end;Shared.Table.Filter=function(a,f,o)local p=Shared.Table.Type(a,f)if p=="empty"then return{}end;if p=="array"then local q={}for d,e in pairs(f)do local r=o(e,d)if r then q[#q+1]={value=e,id=d}end end;table.sort(q,function(s,t)return s.id<t.id end)local l={}for n=1,#q do l[n]=q[n].value end;return Shared.Table.RemoveNilValues(a,l)end;local l={}for d,e in pairs(f)do if o(e,d)then l[d]=e end end;return Shared.Table.RemoveNilValues(a,l)end;Shared.Table.FilterByKey=function(a,table,u)local l={}for d,e in pairs(table)do local v=e[u]if v then l[v]=l[v]or{}l[v][#l[v]+1]=e end end;return l end;Shared.Table.Clone=function(a,f)local l={}for d,e in pairs(f)do if type(e)=="table"then l[d]=Shared.Table.Clone(a,e)else l[d]=e end end;return l end