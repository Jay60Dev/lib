AddStore("PARTICLEEFFECTS",function(a)a=a or{}if DoesParticleFxLoopedExist(a.effect)then StopParticleFxLooped(a.effect,false)end end)Client.StartPtfx=function(b,c,d)if not b then print("resourceName is required")return end;if not DoesEntityExist(c)then return end;if not d or not d.dict or d.stop then return Client.StopPtfx(b,c,d)end;if d and type(d)=='table'then d.id=d.id or Shared.Random.String(b,"............................................")local e,f=d.offset or vector(0,0,0),d.rotation or vector3(0,0,0)if not Client.LoadPtfx(b,d)then return print("^1ERROR^7: failed to load ptfx")end;UseParticleFxAsset(d.dict)if d.scale then d.scale=d.scale*1.0 end;local g=StartParticleFxLoopedOnEntity(d.effect,c,e.x,e.y,e.z,f.x,f.y,f.z,d.scale or 1.0,false,false,false)AddToStore('PARTICLEEFFECTS',b,{effect=g,entity=c,name=d.effect,id=d.id})Client.RemovePtfx(b,d)return d.id end end;Client.StopPtfx=function(b,c,d)d=d or{}local h=STORE.PARTICLEEFFECTS[b]for i,g in pairs(h or{})do if d.id then if g.id==d.id then StopParticleFxLooped(g.effect,false)STORE.PARTICLEEFFECTS[b][i]=nil end elseif d.effect then if g.name==d.effect and g.entity==c then StopParticleFxLooped(g.effect,false)STORE.PARTICLEEFFECTS[b][i]=nil end else StopParticleFxLooped(g.effect,false)STORE.PARTICLEEFFECTS[b]=nil end end end;AddStateBagChangeHandler('lib:particleEffects',nil,function(j,k,l,k,m)if m then return end;if not l.resourceName then return end;local c=GetEntityFromStateBagName(j)Client.StartPtfx(l.resourceName,c,l)end)